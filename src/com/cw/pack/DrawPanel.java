/*
 * Copyright 2015 Hongxin Telecommunication Technologies Co, Ltd.,
 * Wuhan, Hubei, China. All rights reserved.
 */

/*
 * DrawPanel.java
 *
 * Created on 2017-12-11, 19:14:54
 */

package com.cw.pack;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.List;

/**
 *
 * @author chenwei
 */
public class DrawPanel extends javax.swing.JPanel
{

	private int type;
	private Car car;
	private Color[] colors = new Color[]{Color.BLUE, Color.ORANGE, Color.GREEN, Color.BLACK, Color.LIGHT_GRAY, Color.RED};
    /** Creates new form DrawPanel */
    public DrawPanel(int type, Car car)
	{
        initComponents();
		this.car = car;
		this.type = type;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 369, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 285, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

     @Override
     protected void paintComponent(Graphics g) {
        super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g.create();
		Font defaultFont = g2d.getFont();
		g2d.setFont(new Font(defaultFont.getName(), defaultFont.getStyle(), 11));
		drawCar(g2d);
	}
	private void drawCar(Graphics2D g2d)
	{
		int carLength = (int)car.getLength();
		int carWidth = (int)car.getWidth();
		int carHigh = (int)car.getHigh();
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setColor(Color.BLACK);
		int drawCarLen = this.getWidth() - 10;
		
		float rate = (float)drawCarLen/carLength;
		Diff diff = drawBox(g2d, car, rate);
		
		List<Weapon> devs = car.getPutDevices();
		int carLeftLength = (int)car.getLength();
		int x = diff.getLeft();//real x
		int y = diff.getTop();
		int z = diff.getDistance();
		int count = 0;
		for(Weapon dev:devs)
		{
			count++;
			g2d.setColor(colors[count%6]);
			int cols = carWidth/(int)dev.getLength();//每条个数
			int rows = carHigh/(int)dev.getHigh();//能放多少排
			int levels = carLeftLength/(int)dev.getWidth();//能放多少层
			y = (getHeight()-(int)(dev.getHigh()*rate)-diff.getTop());
			z = diff.getDistance();
			
			boolean needDraw = true;
			for(int i = 0;i<dev.getNumber();i++)
			{
				//根据i求x,y,z 
				//x 为左侧面 物体左上角的坐标
				needDraw = (i%cols==0)?true:false;
				if(needDraw||type!=1)
				{
					drawDevice(i+1, g2d, x, y, z, diff, car, dev, rate);
				}				
				//确定下一个的位置
				if((i+1)%cols==0)// z-diff.getDistance()+dev.getLength()*rate-car.getWidth()*rate>0
				{//新起一条
					if((i+1)%(cols*rows)==0)//超出一排// y-diff.getTop()-dev.getHigh()*rate<0
					{
						if(i<dev.getNumber()-1)
						{
							x += dev.getWidth()*rate;
						}
						y = (getHeight()-(int)(dev.getHigh()*rate)-diff.getTop());//(int)(car.getHigh()*rate +diff.getTop() - dev.getHigh()*rate)
						z = diff.getDistance();
					}
					else
					{
						y -= (int)(dev.getHigh() * rate);
						z = diff.getDistance();
					}
				}
				else
				{
					z += dev.getLength()*rate;
				}
				if(i==dev.getNumber()-1)//最后一个
				{
					x += dev.getWidth()*rate;
				}
			}
		}	

	}
	
	private Diff drawBox(Graphics2D g2d, Car car, float rate)
	{
		int di = 5;
		Diff diff = new Diff(type, di, 0, 0);
		int carLength = (int)car.getLength();
		int carWidth = (int)car.getWidth();
		int carHigh = (int)car.getHigh();
		//用于左右侧面
		float drawCarWid = carHigh*rate;
		float start = (this.getHeight() - drawCarWid)/2;
		diff.setTop((int)start);
		//用于顶侧面
		float drawCarWid2 = carWidth*rate;
		float start2 = (this.getHeight() - drawCarWid2)/2;
		diff.setDistance((int)start2);

		int drawCarLen = this.getWidth() - 10;
		switch(type)
		{
			case 1://车左侧面
				g2d.drawString("左侧面", this.getWidth()/2-20, 15);
				g2d.drawRect(di, (int)start, drawCarLen, (int)drawCarWid);				
				break;
			case 2://车右侧面
				g2d.drawString("右侧面", 10, 15);
				g2d.drawRect(di, (int)start, drawCarLen, (int)drawCarWid);
				break;
			case 3://车顶侧面
				g2d.drawString("顶侧面", this.getWidth()/2-20, 15);
				g2d.drawRect(di, (int)start2, drawCarLen, (int)drawCarWid2);
				break;
			default:
				break;
		}
		return diff;
	}
	
	private void drawDevice(int loc, Graphics2D g2d, int x, int y, int z, Diff diff, Car car, Weapon dev, float rate)
	{
		Color beforColor = g2d.getColor();
		int devWidth = 0;
		int devHight = 0;
		int startPoint = 0;
		switch(type)
		{
			case 1://左侧面
				devWidth = (int)(dev.getWidth()*rate)-1;
				devHight = (int)(dev.getHigh()*rate)-1;
				startPoint = y;
				g2d.fillRect(x+3, y, devWidth, devHight);
				break;
			case 2://右侧面
				g2d.fillRect((int)(car.getLength()*rate+diff.getLeft()*2-x-dev.getWidth()*rate), y, (int)(dev.getWidth()*rate), (int)(dev.getHigh()*rate));
				break;
			case 3://顶侧面
				devWidth = (int)(dev.getWidth()*rate)-1;
				devHight = (int)(dev.getLength()*rate)-1;
				startPoint = (int)(car.getWidth()*rate+diff.getDistance()*2-dev.getLength()*rate-z);
				g2d.fillRect(x+3, startPoint, devWidth, devHight);
				break;
			default:
				break;
		}
		g2d.setColor(Color.WHITE);
		g2d.drawString(loc+"", x+devWidth/2-5, startPoint+devHight/2);
		g2d.setColor(beforColor);
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
