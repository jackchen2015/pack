/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cw.pack;

import com.cw.pack.dialog.CarDialog;
import com.cw.pack.dialog.WeaponDialog;
import com.cw.pack.dialog.WeaponTypeDialog;
import com.cw.pack.util.Constants;
import com.cw.pack.util.NumberKeyAdapter;
import com.cw.pack.util.Utils;
import com.cw.pack.util.db.DBHelper;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;

/**
 *
 * @author Administrator
 */
public class MainFrame extends javax.swing.JFrame
{
	
	/**
	 * Creates new form MainFrame
	 */
	public MainFrame()
	{
		initComponents();
		((DefaultTableCellRenderer)loadDevice.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
		initFrame();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        importFile = new javax.swing.JButton();
        calc = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        loadDevice = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        weaponTypeCmb = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        selectAll = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        dev_num = new javax.swing.JTextField();
        insert = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        weaponComb = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        carTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        carModel = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        carNum = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        modifyCar = new javax.swing.JButton();
        delCar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        weaponType = new javax.swing.JMenuItem();
        weapon = new javax.swing.JMenuItem();
        carType = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("装箱主界面");

        importFile.setText("请导入武器弹药文件");
        importFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                importFileActionPerformed(evt);
            }
        });

        calc.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        calc.setText("开始决策");
        calc.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                calcActionPerformed(evt);
            }
        });

        loadDevice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "选择", "名称", "长(毫米)", "宽(毫米)", "高(毫米)", "数量(个)", "重量(KG)", "类别"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        loadDevice.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        loadDevice.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(loadDevice);

        jLabel2.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("武器装箱平台");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("武器类别");

        weaponTypeCmb.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                weaponTypeCmbItemStateChanged(evt);
            }
        });

        jLabel4.setText("武器列表");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        selectAll.setText("全选");
        selectAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectAllActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("数量");

        dev_num.addKeyListener(new NumberKeyAdapter());
        dev_num.setText("0");

        insert.setText("增加");
        insert.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                insertActionPerformed(evt);
            }
        });

        update.setText("修改");
        update.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                updateActionPerformed(evt);
            }
        });
        update.setVisible(false);

        delete.setText("删除");
        delete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteActionPerformed(evt);
            }
        });

        jLabel10.setText("武器");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("可提供车辆信息"));

        carTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "车辆名称", "载重", "数量"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        carTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(carTable);

        jLabel1.setText("请选择车辆");

        jLabel5.setText("数量");

        carNum.addKeyListener(new NumberKeyAdapter());
        carNum.setText("0");

        add.setText("增加");
        add.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addActionPerformed(evt);
            }
        });

        modifyCar.setText("修改");
        modifyCar.setVisible(false);
        modifyCar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                modifyCarActionPerformed(evt);
            }
        });

        delCar.setText("删除");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(carNum, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(carModel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(add, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(modifyCar, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(delCar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(carModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(carNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modifyCar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delCar))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu1.setText("基本信息");

        weaponType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cw/pack/resource/weaponType.jpg"))); // NOI18N
        weaponType.setText("武器类别维护");
        weaponType.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                weaponTypeActionPerformed(evt);
            }
        });
        jMenu1.add(weaponType);

        weapon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cw/pack/resource/weapon.jpg"))); // NOI18N
        weapon.setText("武器维护");
        weapon.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                weaponActionPerformed(evt);
            }
        });
        jMenu1.add(weapon);

        carType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cw/pack/resource/carType.jpg"))); // NOI18N
        carType.setText("车辆维护");
        carType.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                carTypeActionPerformed(evt);
            }
        });
        jMenu1.add(carType);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator5)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator4)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(importFile)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectAll))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(calc)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(weaponTypeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(weaponComb, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dev_num, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(importFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1)))
                    .addComponent(selectAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(weaponTypeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insert)
                    .addComponent(jLabel10)
                    .addComponent(weaponComb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(dev_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update)
                    .addComponent(delete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calc, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel4, selectAll});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void calcActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_calcActionPerformed
    {//GEN-HEADEREND:event_calcActionPerformed
		Map<Model, Map<Integer,Weapon>> allDevs = new HashMap<Model, Map<Integer,Weapon>>();
		
		int id = 0;
		for(int i=0;i<loadDevice.getRowCount();i++)
		{
			if((boolean)loadDevice.getValueAt(i, 0))
			{
				Weapon d = Constants.getInstance().getAllNameMapping().get(loadDevice.getValueAt(i, 1)+"");
				d.setNumber(Integer.parseInt(loadDevice.getValueAt(i, 5)+""));
				Map<Integer,Weapon> mapWp = allDevs.get(d.getModel());
				if(mapWp==null)
				{
					mapWp = new HashMap<Integer, Weapon>();
					allDevs.put(d.getModel(), mapWp);
				}
				mapWp.put(d.getId(), d);
//				Weapon d = new Weapon(id++, loadDevice.getValueAt(i, 1)+"", Long.parseLong(loadDevice.getValueAt(i, 2)+""), 
//						Long.parseLong(loadDevice.getValueAt(i, 3)+""), Long.parseLong(loadDevice.getValueAt(i, 4)+""), Integer.parseInt(loadDevice.getValueAt(i, 6)+""), 
//						Integer.parseInt(loadDevice.getValueAt(i, 5)+""));
//				allDevs.put(id, d);
			}
		}
		if(allDevs.size()==0)
		{
			JOptionPane.showMessageDialog(this, "请选择需要装车的设备");
			return;
		}
		
		
//		Car car = new Car();
//		car.setId(0);
//		car.setLength(5000);
//		car.setWidth(2300);
//		car.setHigh(2100);
//		car.setLoadWeight(30000);
		
		List<Car> allCars = new ArrayList<Car>();
		if(carTable.getRowCount()==0)
		{
			JOptionPane.showMessageDialog(this, "车辆信息为指定，请添加车辆信息！");
			return;
		}
		for(int i=0;i<carTable.getRowCount();i++)
		{
			Car car = Constants.getInstance().getAllMapCars().get(carTable.getValueAt(i, 0)+"");
			car.setNum(Integer.parseInt(carTable.getValueAt(i, 2)+""));//车数量
			allCars.add(car);
		}
		Collections.sort(allCars, new Comparator<Car>(){
			@Override
			public int compare(Car o1, Car o2)
			{
               if(o1.getVolume()<o2.getVolume()){  
                    return 1;  
                }  
                if(o1.getVolume() == o2.getVolume()){  
                    return 0;  
                }  
                return -1; 
			}
		});
		System.out.println(allCars.size());
		
		List<Car> cars = new ArrayList<Car>();
		Car car = allCars.get(0);
		int index = 0;
		for(Map.Entry<Model, Map<Integer,Weapon>> entry:allDevs.entrySet())
		{
			//不同类型单独处理装车
			Model model = entry.getKey();
			Map<Integer, Weapon> devVal = entry.getValue();

			for(Map.Entry<Integer, Weapon> devEntry:devVal.entrySet())
			{
				Weapon dev = devEntry.getValue();
				if(dev.getLength()>car.getWidth())//斜放
				{
					long l = (long)java.lang.Math.sqrt(dev.getLength()*dev.getLength()-car.getWidth()*car.getWidth())+dev.getWidth();
					dev.setLength(car.getWidth());
					dev.setWidth(l);
					dev.setSlanting(true);
				}
			}

			List<Map.Entry<Integer, Weapon>> sortResult = Utils.sort(devVal, true);//逆序排列
			Utils.load(cars, sortResult, index, allCars);
			for(Car cc:allCars)
			{
				Car lastCar = cars.get(cars.size()-1);
				if(cc.getName()==lastCar.getName())
				{
					index = allCars.indexOf(cc);
					if(cc.getCurrNum()==cc.getNum())
					{
						index++;
					}
					break;
				}
			}

//			for(Car cc:allCars)
//			{
//				cc.set
//			}
		}
			for(Car c:cars)
			{
				System.out.println("car id:"+c.getId());
				List<Weapon> ds = c.getPutDevices();
				for(Weapon d:ds)
				{
					System.out.println("---->dev id:"+d.getId()+", number is:"+d.getNumber());
				}
			}
		
//		for(Map.Entry<Integer, Weapon> devEntry:allDevs.entrySet())
//		{
//			Weapon dev = devEntry.getValue();
//			if(dev.getLength()>car.getWidth())//斜放
//			{
//				long l = (long)java.lang.Math.sqrt(dev.getLength()*dev.getLength()-car.getWidth()*car.getWidth())+dev.getWidth();
//				dev.setLength(car.getWidth());
//				dev.setWidth(l);
//				dev.setSlanting(true);
//			}
//		}
//		
//		List<Map.Entry<Integer, Weapon>> sortResult = Utils.sort(allDevs, true);//逆序排列
//		List<Car> cars = new ArrayList<Car>();
//		Utils.load(cars, sortResult, car);
//		for(Car c:cars)
//		{
//			System.out.println("car id:"+c.getId());
//			List<Weapon> ds = c.getPutDevices();
//			for(Weapon d:ds)
//			{
//				System.out.println("---->dev id:"+d.getId()+", number is:"+d.getNumber());
//			}
//		}
//		
//		
		ResultDialog rd = new ResultDialog(this, cars, true);
		rd.setVisible(true);
		
    }//GEN-LAST:event_calcActionPerformed

    private void importFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importFileActionPerformed
    {//GEN-HEADEREND:event_importFileActionPerformed
		JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("EXECL Files", "xls");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }

		ArrayList<ArrayList<Object>> result = Utils.readExcel2003(chooser.getSelectedFile());
		System.out.println(result);
		int rows = loadDevice.getRowCount();
		if(rows>0)
		{
			selectAll.setSelected(false);
			for(int i=0;i<rows;i++)
				((DefaultTableModel)loadDevice.getModel()).removeRow(0);
		}
		for(int i=1;i<result.size();i++)
		{
			ArrayList<Object> rowObj = result.get(i);
			String weaponName = (String)rowObj.get(1);
			Weapon wp = Constants.getInstance().getAllNameMapping().get(weaponName);
			if(wp!=null)
			{
				wp.setNumber(Integer.parseInt(rowObj.get(5)+""));
			}
			else
			{
				JOptionPane.showMessageDialog(this, "武器'"+weaponName+"'在数据库中没找到！请在武器维护中添加该武器，然后再次导入该装车武器信息！");
				continue;
			}
			((DefaultTableModel)loadDevice.getModel()).addRow(new Object[]{false, rowObj.get(1), rowObj.get(2), rowObj.get(3), rowObj.get(4), rowObj.get(5), rowObj.get(6), Constants.getInstance().getAllMapModels().get(rowObj.get(7))});
		}		
    }//GEN-LAST:event_importFileActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectAllActionPerformed
    {//GEN-HEADEREND:event_selectAllActionPerformed
        // TODO add your handling code here:
		int rows = loadDevice.getModel().getRowCount();
		for(int i=0;i<rows;i++)
		{
			loadDevice.getModel().setValueAt(selectAll.isSelected(), i, 0);
		}
    }//GEN-LAST:event_selectAllActionPerformed

    private void insertActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_insertActionPerformed
    {//GEN-HEADEREND:event_insertActionPerformed
		Weapon sw = (Weapon)weaponComb.getSelectedItem();
		((DefaultTableModel)loadDevice.getModel()).addRow(new Object[]{false, sw.getName(), sw.getLength(), sw.getWidth(), sw.getHigh(), Integer.parseInt(dev_num.getText()), sw.getWidth(), sw.getModel()});
		
//		if(selectWeapon!=null)
//		{			
//			selectWeapon.setNumber(Integer.parseInt(dev_num.getText()));
//		}
		
    }//GEN-LAST:event_insertActionPerformed

    private void weaponTypeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_weaponTypeActionPerformed
    {//GEN-HEADEREND:event_weaponTypeActionPerformed
        WeaponTypeDialog wtd = new WeaponTypeDialog(this, true);
		wtd.setVisible(true);
    }//GEN-LAST:event_weaponTypeActionPerformed

    private void weaponActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_weaponActionPerformed
    {//GEN-HEADEREND:event_weaponActionPerformed
        WeaponDialog wd = new WeaponDialog(this, true);
		wd.setVisible(true);
    }//GEN-LAST:event_weaponActionPerformed

    private void carTypeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_carTypeActionPerformed
    {//GEN-HEADEREND:event_carTypeActionPerformed
        CarDialog car = new CarDialog(this, true);
		car.setVisible(true);
    }//GEN-LAST:event_carTypeActionPerformed

    private void weaponTypeCmbItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_weaponTypeCmbItemStateChanged
    {//GEN-HEADEREND:event_weaponTypeCmbItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){  
            Model itemObj = (Model) evt.getItem();
			weaponComb.removeAllItems();
            try{  
                List<Weapon> weaps = Constants.getInstance().getWeapMapping().get(itemObj);
				if(weaps!=null)
				{
					for(Weapon weap:weaps)
					{
						weaponComb.addItem(weap);
					}
				}
            }catch(Exception ex){  
                  
            }  
        }  
    }//GEN-LAST:event_weaponTypeCmbItemStateChanged

    private void updateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_updateActionPerformed
    {//GEN-HEADEREND:event_updateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteActionPerformed
    {//GEN-HEADEREND:event_deleteActionPerformed
		List<Integer> needDelete = new ArrayList<Integer>();
		for(int i=0;i<loadDevice.getRowCount();i++)
		{
			if((boolean)loadDevice.getValueAt(i, 0))
			{				
				needDelete.add(i);
			}
		}
		for(int i=needDelete.size()-1;i>=0;i--)
		{
			((DefaultTableModel)loadDevice.getModel()).removeRow(i);
		}
    }//GEN-LAST:event_deleteActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addActionPerformed
    {//GEN-HEADEREND:event_addActionPerformed
        Car car = (Car)carModel.getSelectedItem();
		car.setNum(Integer.parseInt(carNum.getText()));
		((DefaultTableModel)carTable.getModel()).addRow(new Object[]{car.getName(), car.getLoadWeight(), car.getNum()});
    }//GEN-LAST:event_addActionPerformed

    private void modifyCarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modifyCarActionPerformed
    {//GEN-HEADEREND:event_modifyCarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modifyCarActionPerformed

	private String getStringCellValue(HSSFCell cell)
	{
		if(cell == null)
		{
			return "";
		}
		try
		{
			switch(cell.getCellType())
			{
				case Cell.CELL_TYPE_STRING:
					return cell.getRichStringCellValue().getString().trim();
				case Cell.CELL_TYPE_NUMERIC:
					return (String.valueOf(cell.getNumericCellValue())).
							split("\\..")[0];
				case Cell.CELL_TYPE_BOOLEAN:
					return String.valueOf(cell.getBooleanCellValue());
				case Cell.CELL_TYPE_ERROR:
					return String.valueOf(cell.getErrorCellValue());
				case Cell.CELL_TYPE_FORMULA:
					return cell.getCellFormula();
				case Cell.CELL_TYPE_BLANK:
					return "";
				default:
					return cell.getStringCellValue().trim();
			}
		}
		catch(Exception exp)
		{
			return null;
		}
	}	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
					getInstalledLookAndFeels())
			{
				if("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch(ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).
					log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).
					log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).
					log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).
					log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new MainFrame().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton calc;
    private javax.swing.JComboBox<Car> carModel;
    private javax.swing.JTextField carNum;
    private javax.swing.JTable carTable;
    private javax.swing.JMenuItem carType;
    private javax.swing.JButton delCar;
    private javax.swing.JButton delete;
    private javax.swing.JTextField dev_num;
    private javax.swing.JButton importFile;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTable loadDevice;
    private javax.swing.JButton modifyCar;
    private javax.swing.JCheckBox selectAll;
    private javax.swing.JButton update;
    private javax.swing.JMenuItem weapon;
    private javax.swing.JComboBox<Weapon> weaponComb;
    private javax.swing.JMenuItem weaponType;
    private javax.swing.JComboBox<Model> weaponTypeCmb;
    // End of variables declaration//GEN-END:variables

	private void initFrame()
	{
		DBHelper helper =new DBHelper();
		List<Model> allModels = helper.getAllModel();
		Constants.getInstance().setAllModels(allModels);
		List<Weapon> allWeapons = helper.getAllWeapon();
		Constants.getInstance().setAllWeapons(allWeapons);
		Map<Model, List<Weapon>> mapping = Constants.getInstance().getWeapMapping();
		Map<String, Weapon> nameWMaping = Constants.getInstance().getAllNameMapping();
		for(Weapon weapon:allWeapons)
		{
			nameWMaping.put(weapon.getName(), weapon);
			List<Weapon> weaponLst = mapping.get(weapon.getModel());
			if(weaponLst==null)
			{
				weaponLst = new ArrayList<Weapon>();
				mapping.put(weapon.getModel(), weaponLst);
			}
			weaponLst.add(weapon);
		}
//		Constants.getInstance().setWeapMapping(mapping);
		List<Car> allCars = helper.getAllCar();
		Constants.getInstance().setAllCars(allCars);
		for(Model model:allModels)
		{
			weaponTypeCmb.addItem(model);
			Constants.getInstance().getAllMapModels().put(model.getName(), model);
		}
		for(Car car:allCars)
		{
			Constants.getInstance().getAllMapCars().put(car.getName(), car);
			carModel.addItem(car);
		}
		
	}
}
